"""A category contains a group of plant objects."""
type Category implements Node {
  """The user ID of a category's owner"""
  createdBy: String

  """A translated description of a category"""
  description: String
  id: ID!

  """A list of images related to a category"""
  images(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ImageConnection

  """A list of languages in which a category is available"""
  languages: [String!]!

  """The translated name of a category"""
  name: String

  """The internal database ID for a category"""
  uuid: ID!
}

"""The connection type for Category."""
type CategoryConnection {
  """A list of edges."""
  edges: [CategoryEdge]

  """A list of nodes."""
  nodes: [Category]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CategoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Category
}

"""Autogenerated return type of DeleteCategory"""
type DeleteCategoryPayload {
  categoryId: ID!
}

type Image implements Node {
  attribution: String
  baseUrl: String!
  description: String
  id: ID!
  imageAttributes: [ImageAttribute!]
  name: String!
  uuid: ID!
}

type ImageAttribute {
  name: String!
}

"""The connection type for Image."""
type ImageConnection {
  """A list of edges."""
  edges: [ImageEdge]

  """A list of nodes."""
  nodes: [Image]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ImageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Image
}

type Mutation {
  """Creates a new plant category"""
  createCategory(name: String!, description: String, language: String): Category!

  """Deletes a plant category"""
  deleteCategory(categoryId: ID!): DeleteCategoryPayload!

  """Updates a plant category"""
  updateCategory(categoryId: ID!, name: String, description: String, language: String): Category!
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query implements Node {
  """Returns a list of Plant Categories"""
  categories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    scope: String
  ): CategoryConnection!

  """Find a category by ID"""
  category(id: ID!): Category

  """ID of the object."""
  id: ID!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
}

